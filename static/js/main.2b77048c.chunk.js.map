{"version":3,"sources":["components/CardExpense/CardExpense.js","components/CardTransaction/CardTransaction.js","components/CardInfo/CardInfo.js","utils/accumulator.js","views/ExpenseTracker/ExpenseTracker.js","App.js","serviceWorker.js","index.js"],"names":["CardExpense","props","Card","style","width","Header","Body","Title","ListGroup","variant","expensesData","map","ed","id","name","amount","Item","key","className","Badge","pill","CardTransaction","Form","onSubmit","handleSubmit","Group","controlId","Label","Control","type","placeholder","onChange","handleOnChange","Text","Button","disabled","buttonActive","block","CardInfo","Row","Col","income","expense","reducer","accumulator","currentValue","ExpenseTracker","useState","Math","random","expenseData","setExpenseData","setButtonActive","lastExpense","initialIncome","transaction","totalExpense","data","setData","useEffect","ps","reduce","Numbering","v","value","displayType","thousandSeparator","prefix","Container","fluid","sm","md","e","preventDefault","parseInt","target","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2b77048c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, ListGroup, Badge } from \"react-bootstrap\";\r\n\r\nconst expenseView = (id, name, amount) => (\r\n  <ListGroup.Item key={id}>\r\n    {name}\r\n    <span className=\"float-right\">\r\n      <Badge pill variant=\"primary\">\r\n        {amount}\r\n      </Badge>\r\n    </span>\r\n  </ListGroup.Item>\r\n);\r\n\r\nexport default function CardExpense(props) {\r\n  return (\r\n    <>\r\n      <Card style={{ width: \"23rem\" }}>\r\n        <Card.Header>Expense</Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>History</Card.Title>\r\n          <ListGroup variant=\"flush\">\r\n            {props.expensesData.map(ed => {\r\n              return expenseView(ed.id, ed.name, ed.amount);\r\n            })}\r\n          </ListGroup>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Button, Form } from \"react-bootstrap\";\r\n\r\nexport default function CardTransaction(props) {\r\n  return (\r\n    <>\r\n      <Card style={{ width: \"23rem\" }}>\r\n        <Card.Header>Input Transaction</Card.Header>\r\n        <Card.Body>\r\n          <Form onSubmit={props.handleSubmit}>\r\n            <Form.Group controlId=\"form-transaction\">\r\n              <Form.Label>Transaction name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"e.g. Buy Beef Burger\"\r\n                onChange={props.handleOnChange(\"transaction\")}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Name of your Transaction\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"form-amount\">\r\n              <Form.Label>Amount</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"e.g. 400\"\r\n                onChange={props.handleOnChange(\"expense\")}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Positive and Negative\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button\r\n              disabled={props.buttonActive}\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              block\r\n            >\r\n              Save Transaction\r\n            </Button>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\n\r\nexport default function CardInfo(props) {\r\n  return (\r\n    <>\r\n      <Card style={{ width: \"23rem\" }}>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col>\r\n            <Card.Body>\r\n              <Card.Title className=\"d-flex justify-content-md-center\">\r\n                Income\r\n              </Card.Title>\r\n              <Card.Title className=\"d-flex justify-content-md-center\">\r\n                {props.income}\r\n              </Card.Title>\r\n            </Card.Body>\r\n          </Col>\r\n          <Col>\r\n            <Card.Body>\r\n              <Card.Title className=\"d-flex justify-content-md-center\">\r\n                Expenses\r\n              </Card.Title>\r\n              <Card.Title className=\"d-flex justify-content-md-center\">\r\n                {props.expense}\r\n              </Card.Title>\r\n            </Card.Body>\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","export const reducer = (accumulator, currentValue) =>\r\n  accumulator + currentValue;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n// components\r\nimport { CardTransaction, CardExpense, CardInfo } from \"../../components\";\r\nimport { reducer } from \"../../utils/accumulator\";\r\n\r\nexport default function ExpenseTracker() {\r\n  const [expenseData, setExpenseData] = useState([\r\n    { id: Math.random(), name: \"Food Chicken\", amount: 100 },\r\n    { id: Math.random(), name: \"Transport\", amount: 75 }\r\n  ]);\r\n  const [buttonActive, setButtonActive] = useState(false);\r\n\r\n  const lastExpense = expenseData.map(ed => ed.amount);\r\n\r\n  const [data, setData] = useState({\r\n    initialIncome: 2000,\r\n    transaction: \"\",\r\n    expense: null,\r\n    totalExpense: null\r\n  });\r\n\r\n  const handleOnChange = name => e => {\r\n    setData({ ...data, [name]: e.target.value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setData(ps => {\r\n      return { ...ps, totalExpense: lastExpense.reduce(reducer) };\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data.expense === \"\" || data.transaction === \"\") {\r\n      setButtonActive(true);\r\n    } else {\r\n      setButtonActive(false);\r\n    }\r\n  }, [data.expense, data.transaction]);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    setData(ps => {\r\n      return {\r\n        ...ps,\r\n        totalExpense: data.totalExpense + parseInt(data.expense)\r\n      };\r\n    });\r\n\r\n    setExpenseData(ps => {\r\n      return [\r\n        ...ps,\r\n        { id: Math.random(), name: data.transaction, amount: data.expense }\r\n      ];\r\n    });\r\n  };\r\n\r\n  const Numbering = v => {\r\n    return (\r\n      <NumberFormat\r\n        value={v}\r\n        displayType={\"text\"}\r\n        thousandSeparator={true}\r\n        prefix={\"Rp. \"}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"mt-5\">\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col sm={12} md={4} className=\"d-flex justify-content-center mb-2\">\r\n            <CardInfo\r\n              income={Numbering(data.initialIncome)}\r\n              expense={Numbering(data.totalExpense)}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col sm={12} md={6} className=\"d-flex justify-content-center mb-2\">\r\n            <CardTransaction\r\n              handleSubmit={handleSubmit}\r\n              handleOnChange={handleOnChange}\r\n              buttonActive={buttonActive}\r\n            />\r\n          </Col>\r\n          <Col sm={12} md={6} className=\"d-flex justify-content-center\">\r\n            <CardExpense expensesData={expenseData} />\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { ExpenseTracker } from \"./views\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <>\n      <ExpenseTracker />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}